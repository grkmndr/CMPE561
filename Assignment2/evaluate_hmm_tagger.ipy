#from sklearn.metrics import confusion_matrix
import re 
import os
import sys
import codecs
import json
import numpy as np

output_file = sys.argv[1]
gold_file = sys.argv[2]

tag_type = ''
tags = [] # tag sequence generated by our model
cpostags = [] # actual tag sequence for the cpostag case
postags = [] # actual tag sequence for the postag case  
training_data = {}

with codecs.open('./hmm.data', 'r', 'UTF-8') as myfile:
	data = myfile.read()
	training_data = json.loads(data)

tag_pairs = training_data['tag_pairs']
unique_tags = tag_pairs.keys()
unique_tags.remove('START')
unique_tags.append('nottagged')
print(unique_tags)
# Tokenizer
def tokenize(text, regex): 
    tokens = re.split(regex, text)
    return tokens


with codecs.open('./' + output_file, 'r', 'utf-8-sig') as myfile:

	text = myfile.read().lower()

	word_tag_pairs = tokenize(text, "\||\s+")

	tag_type = word_tag_pairs[-1]

	for i in range(0,len(word_tag_pairs)):
		if i%2:
			tags.append(word_tag_pairs[i])

with codecs.open('./' + gold_file, 'r', 'utf-8-sig') as myfile:

	text = myfile.read().lower()

	word_tag_pairs = tokenize(text, "\s+")

	cpostags = []
	postags = []
	for i in range(0,len(word_tag_pairs)-1, 10):
		if word_tag_pairs[i+1] != '_':
			cpostags.append(word_tag_pairs[i+3])
			postags.append(word_tag_pairs[i+4])

	tl = len(unique_tags) # the number of unique tags

	cm = np.zeros((tl,tl))

	success_count = 0
	total_count = 0

	if tag_type == 'postag':
		postag_counts = {}
		sample_counts = {}
		for tag in unique_tags:
			postag_counts[tag] = postags.count(tag)
			sample_counts[tag] = tags.count(tag)

		for i in range(0, len(tags)):
			total_count += 1
			if tags[i] == postags[i]:
				success_count += 1
				index = unique_tags.index(tags[i])
				cm[index][index] += 1
			else:
				first_index = unique_tags.index(tags[i])
				second_index = unique_tags.index(postags[i])
				cm[first_index][second_index] += 1

		print('Confusion Matrix: ')		
		print(cm)

	if tag_type == 'cpostag':
		cpostag_counts = {}
		sample_counts = {}
		for tag in unique_tags:
			cpostag_counts[tag] = cpostags.count(tag)
			sample_counts[tag] = tags.count(tag)

		for i in range(0, len(tags)):
			total_count += 1
			if tags[i] == cpostags[i]:
				success_count += 1
				index = unique_tags.index(tags[i])
				cm[index][index] += 1
			else:
				first_index = unique_tags.index(tags[i])
				second_index = unique_tags.index(cpostags[i])
				cm[first_index][second_index] += 1
		print('Confusion Matrix: ')		
		print(cm)

	print('Succes rate is: ', float(success_count)/total_count)




